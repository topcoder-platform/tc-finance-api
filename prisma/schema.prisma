generator client {
  provider = "prisma-client-js"
  previewFeatures = ["extendedIndexes"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model audit {
  id          String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  winnings_id String   @db.Uuid
  user_id     String   @db.VarChar(80)
  action      String   @db.VarChar(512)
  note        String?
  created_at  DateTime @default(now()) @db.Timestamp(6)
  winnings    winnings @relation(fields: [winnings_id], references: [winning_id], onDelete: NoAction, onUpdate: NoAction)
}

model docusign_envelopes {
  id                           String                     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_tax_form_association_id String                     @db.Uuid
  envelope_id                  String                     @db.VarChar(80)
  template_id                  String                     @db.VarChar(80)
  status_id                    docusign_envelope_status?
  user_tax_form_associations   user_tax_form_associations @relation(fields: [user_tax_form_association_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model origin {
  origin_id   Int        @id @default(autoincrement())
  origin_name String     @db.VarChar(255)
  winnings    winnings[]
}

model otp {
  id              String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email           String         @db.VarChar(255)
  otp_hash        String         @db.VarChar(255)
  expiration_time DateTime       @default(dbgenerated("(CURRENT_TIMESTAMP + '00:05:00'::interval)")) @db.Timestamp(6)
  transaction_id  String         @db.VarChar(255)
  action_type     reference_type
  created_at      DateTime?      @default(now()) @db.Timestamp(6)
  updated_at      DateTime?      @default(now()) @db.Timestamp(6)
  verified_at     DateTime?      @db.Timestamp(6)
}

model payment {
  payment_id                   String                         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  winnings_id                  String                         @db.Uuid
  net_amount                   Decimal?                       @db.Decimal(12, 2)
  gross_amount                 Decimal?                       @db.Decimal(12, 2)
  total_amount                 Decimal?                       @db.Decimal(12, 2)
  installment_number           Int?                           @default(1)
  date_paid                    DateTime?                      @db.Timestamp(6)
  payment_method_id            Int?
  currency                     String?                        @default("USD") @db.VarChar(5)
  created_by                   String                         @db.VarChar(80)
  updated_by                   String?                        @db.VarChar(80)
  created_at                   DateTime?                      @default(now()) @db.Timestamp(6)
  updated_at                   DateTime?                      @default(now()) @db.Timestamp(6)
  version                      Int?                           @default(1)
  release_date                 DateTime?                      @default(dbgenerated("(CURRENT_TIMESTAMP + '15 days'::interval)")) @db.Timestamp(6)
  payment_status               payment_status?
  payment_method               payment_method?                @relation(fields: [payment_method_id], references: [payment_method_id], onDelete: NoAction, onUpdate: NoAction)
  winnings                     winnings                       @relation(fields: [winnings_id], references: [winning_id], onDelete: NoAction, onUpdate: NoAction)
  payment_release_associations payment_release_associations[]
}

model payment_method {
  payment_method_id           Int                           @id @default(autoincrement())
  payment_method_type         String                        @unique @db.VarChar(50)
  name                        String                        @db.VarChar(50)
  description                 String?
  payment                     payment[]
  payment_releases            payment_releases[]
  user_default_payment_method user_default_payment_method[]
  user_payment_methods        user_payment_methods[]
}

model payment_release_associations {
  payment_release_id String           @db.Uuid
  payment_id         String           @db.Uuid
  payment            payment          @relation(fields: [payment_id], references: [payment_id], onDelete: NoAction, onUpdate: NoAction)
  payment_releases   payment_releases @relation(fields: [payment_release_id], references: [payment_release_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([payment_release_id, payment_id])
}

model payment_releases {
  payment_release_id           String                         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id                      String                         @db.VarChar(80)
  total_net_amount             Decimal                        @db.Decimal(12, 2)
  payment_method_id            Int
  status                       String?                        @default("Pending") @db.VarChar(20)
  external_transaction_id      String?                        @db.VarChar(255)
  metadata                     Json?
  created_at                   DateTime?                      @default(now()) @db.Timestamptz(6)
  payee_id                     String?                        @db.VarChar(80)
  release_date                 DateTime?                      @default(now()) @db.Timestamptz(6)
  batch_id                     String?                        @db.Uuid
  payment_release_associations payment_release_associations[]
  payment_method               payment_method                 @relation(fields: [payment_method_id], references: [payment_method_id], onDelete: NoAction, onUpdate: NoAction)
}

model payoneer_payment_method {
  id                     Int                  @id @default(autoincrement())
  user_payment_method_id String               @db.Uuid
  user_id                String               @unique @db.VarChar(80)
  payee_id               String               @db.VarChar(50)
  payoneer_id            String?              @db.VarChar(50)
  user_payment_methods   user_payment_methods @relation(fields: [user_payment_method_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_payoneer_user_payment_method")
}

model paypal_payment_method {
  id                     Int                  @id @default(autoincrement())
  user_payment_method_id String               @db.Uuid
  user_id                String               @unique @db.VarChar(80)
  email                  String?              @db.VarChar(150)
  payer_id               String?              @db.VarChar(50)
  country_code           String?              @db.VarChar(2)
  user_payment_methods   user_payment_methods @relation(fields: [user_payment_method_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_paypal_user_payment_method")
}

model reward {
  reward_id   String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  winnings_id String    @db.Uuid
  points      Int?
  title       String?   @db.VarChar(255)
  description String?
  reference   Json?
  attributes  Json?
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  updated_at  DateTime? @default(now()) @db.Timestamp(6)
  winnings    winnings  @relation(fields: [winnings_id], references: [winning_id], onDelete: NoAction, onUpdate: NoAction)
}

model tax_forms {
  tax_form_id                    String                       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                           String?                      @db.VarChar(30)
  text                           String?
  description                    String?                      @db.VarChar(255)
  default_withholding_amount     Decimal?                     @db.Decimal(12, 2)
  default_withholding_percentage Decimal?                     @db.Decimal(5, 5)
  use_percentage                 Boolean?
  e_sign_template_id             String                       @db.VarChar(80)
  user_tax_form_associations     user_tax_form_associations[]
}

model transaction {
  id             String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id        String             @db.VarChar(255)
  reference_id   String             @db.Uuid
  reference_type reference_type
  status         transaction_status @default(INITIATED)
  created_at     DateTime?          @default(now()) @db.Timestamp(6)
  updated_at     DateTime?          @default(now()) @db.Timestamp(6)
}

model user_default_payment_method {
  user_id           String         @id @db.VarChar(80)
  payment_method_id Int
  payment_method    payment_method @relation(fields: [payment_method_id], references: [payment_method_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_default_payment_method")
}

model user_payment_methods {
  id                      String                    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id                 String                    @db.VarChar(80)
  payment_method_id       Int
  status                  payment_method_status?    @default(OTP_PENDING)
  payoneer_payment_method payoneer_payment_method[]
  paypal_payment_method   paypal_payment_method[]
  payment_method          payment_method            @relation(fields: [payment_method_id], references: [payment_method_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_payment_method")

  @@unique([user_id, payment_method_id])
}

model user_tax_form_associations {
  id                     String               @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id                String               @db.VarChar(80)
  tax_form_id            String               @db.Uuid
  date_filed             DateTime?            @db.Timestamp(6)
  withholding_amount     Decimal?             @db.Decimal
  withholding_percentage Decimal?             @db.Decimal(5, 5)
  status_id              tax_form_status?
  use_percentage         Boolean?
  docusign_envelopes     docusign_envelopes[]
  tax_forms              tax_forms            @relation(fields: [tax_form_id], references: [tax_form_id], onDelete: NoAction, onUpdate: NoAction)
}

model winnings {
  winning_id  String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  winner_id   String             @db.VarChar(80)
  type        winnings_type
  origin_id   Int?
  category    winnings_category?
  title       String?            @db.VarChar(255)
  description String?
  external_id String?            @db.VarChar(255)
  attributes  Json?
  created_by  String             @db.VarChar(80)
  updated_by  String?            @db.VarChar(80)
  created_at  DateTime?          @default(now()) @db.Timestamp(6)
  updated_at  DateTime?          @default(now()) @db.Timestamp(6)
  audit       audit[]
  payment     payment[]
  reward      reward[]
  origin      origin?            @relation(fields: [origin_id], references: [origin_id], onDelete: NoAction, onUpdate: NoAction)
}

enum action_type {
  INITIATE_WITHDRAWAL
  ADD_WITHDRAWAL_METHOD
  REMOVE_WITHDRAWAL_METHOD
  SETUP_TAX_FORMS
  REMOVE_TAX_FORMS
}

enum docusign_envelope_status {
  CREATED
  OTP_VERIFIED
  COMPLETED
  DECLINED
}

enum payment_method_status {
  OTP_PENDING
  OTP_VERIFIED
  CONNECTED
  INACTIVE
}

enum payment_status {
  PAID
  ON_HOLD
  ON_HOLD_ADMIN
  OWED
  PROCESSING
  CANCELLED
}

enum reference_type {
  ADD_PAYMENT_METHOD
  REMOVE_PAYMENT_METHOD
  GET_PAYMENT_METHOD_REGISTRATION_LINK
  VIEW_TAX_FORM
  SUBMIT_TAX_FORM
  REMOVE_TAX_FORM
  WITHDRAW_PAYMENT
}

enum tax_form_status {
  OTP_PENDING
  OTP_VERIFIED
  ACTIVE
  INACTIVE
}

enum transaction_status {
  INITIATED
  COMPLETED
  EXPIRED
  CANCELLED
  FAILED
}

enum winnings_category {
  ALGORITHM_CONTEST_PAYMENT
  CONTRACT_PAYMENT
  PROBLEM_PAYMENT
  CODER_REFERRAL_PAYMENT
  CHARITY_PAYMENT
  COMPONENT_PAYMENT
  REVIEW_BOARD_PAYMENT
  ONE_OFF_PAYMENT
  BUG_FIXES_PAYMENT
  MARATHON_MATCH_PAYMENT
  DIGITAL_RUN_PAYMENT
  DIGITAL_RUN_ROOKIE_PAYMENT
  PROBLEM_TESTING_PAYMENT
  PROBLEM_WRITING_PAYMENT
  TOPCODER_STUDIO_CONTEST_PAYMENT
  LOGO_CONTEST_PAYMENT
  ARTICLE_PAYMENT
  CCIP_PAYMENT
  COMPONENT_TOURNAMENT_BONUS_PAYMENT
  ROYALTY_PAYMENT
  ALGORITHM_TOURNAMENT_PRIZE_PAYMENT
  RELIABILITY_BONUS_PAYMENT
  DIGITAL_RUN_TOP_PERFORMERS_PAYMENT
  ARCHITECTURE_REVIEW_PAYMENT
  SPECIFICATION_REVIEW_PAYMENT
  ASSEMBLY_COMPETITION_REVIEW
  ARCHITECTURE_PAYMENT
  PREDICTIVE_CONTEST_PAYMENT
  INTRODUCTORY_EVENT_COMPONENT_CONTEST_PAYMENT
  MARATHON_MATCH_TOURNAMENT_PRIZE_PAYMENT
  ASSEMBLY_PAYMENT
  TESTING_PAYMENT
  STUDIO_TOURNAMENT_PRIZE_PAYMENT
  HIGH_SCHOOL_TOURNAMENT_PRIZE_PAYMENT
  COLLEGE_TOUR_REPRESENTATIVE
  STUDIO_REVIEW_BOARD_PAYMENT
  COMPONENT_ENHANCEMENTS_PAYMENT
  REVIEW_BOARD_BONUS_PAYMENT
  COMPONENT_BUILD_PAYMENT
  DIGITAL_RUN_V2_PAYMENT
  DIGITAL_RUN_V2_TOP_PERFORMERS_PAYMENT
  SPECIFICATION_CONTEST_PAYMENT
  CONCEPTUALIZATION_CONTEST_PAYMENT
  TEST_SUITES_PAYMENT
  COPILOT_PAYMENT
  STUDIO_BUG_FIXES_PAYMENT
  STUDIO_ENHANCEMENTS_PAYMENT
  STUDIO_SPECIFICATION_REVIEW_PAYMENT
  UI_PROTOTYPE_COMPETITION_PAYMENT
  RIA_BUILD_COMPETITION_PAYMENT
  RIA_COMPONENT_COMPETITION_PAYMENT
  SPECIFICATION_WRITING_PAYMENT
  STUDIO_SPECIFICATION_WRITING_PAYMENT
  DEPLOYMENT_TASK_PAYMENT
  TEST_SCENARIOS_PAYMENT
  STUDIO_SUBMISSION_SCREENING_PAYMENT
  STUDIO_COPILOT_PAYMENT
  COPILOT_POSTING_PAYMENT
  CONTENT_CREATION_PAYMENT
  DIGITAL_RUN_V2_PAYMENT_TAXABLE
  DIGITAL_RUN_V2_TOP_PERFORMERS_PAYMENT_TAXABLE
  CONTEST_CHECKPOINT_PAYMENT
  CONTEST_PAYMENT
  MARATHON_MATCH_NON_TAXABLE_PAYMENT
  NEGATIVE_PAYMENT
  PROJECT_BUG_FIXES_PAYMENT
  PROJECT_COPILOT_PAYMENT
  PROJECT_DEPLOYMENT_TASK_PAYMENT
  PROJECT_ENHANCEMENTS_PAYMENT
  TASK_PAYMENT
  TASK_REVIEW_PAYMENT
  TASK_COPILOT_PAYMENT
}

enum winnings_type {
  PAYMENT
  REWARD
}
